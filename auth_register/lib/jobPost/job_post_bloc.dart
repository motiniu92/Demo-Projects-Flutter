import 'dart:convert';
import 'package:auth_register/authUser/res_model.dart';
import 'package:auth_register/jobPost/course_response.dart';
import 'package:bloc/bloc.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

import 'job_post_event.dart';
import 'job_post_state.dart';


class JobPostBloc extends Bloc<JobPostEvent, JobPostState> {
  JobPostBloc() : super(JobPostState()) {
    on<CategoriesIdChanged>(_onCategoriesIdChanged);

   // on<JobPostApi>(_onJobPostApi);
    on<JobPostClassCourseApi>(_onJobPostClassCourseApi);

  }

  void _onCategoriesIdChanged(CategoriesIdChanged event, Emitter<JobPostState> emit) {
    emit(
      state.copyWith(
        categoriesId: event.categoriesId,
      ),
    );
  }

  //--------------------
  void _onJobPostClassCourseApi(JobPostClassCourseApi event, Emitter<JobPostState> emit) async {
    emit(
      state.copyWith(
        jobPostStatus: JobPostStatus.loading,
      ),
    );

    var query = {"categories_id=": state.categoriesId.toString()};
    Map<String, dynamic> data = {
      'categories_id=': state.categoriesId

    };
     String url = "https://api.besttutor.xyz/api/multiCategoryCourses?";
     String values = "categories_id="+state.categoriesId.toString();
     String finalUrls = url+values;
    print('Course before...: '+ values.toString());
    print('Course before-2...: '+ finalUrls.toString());

    List<dynamic> _courses = [];

    try {
      final response =
      await http.get(Uri.parse(finalUrls,
      ),  headers: {
        'Accept': 'application/json',
      },
         );

      //Map<String, dynamic> map = jsonDecode(response.body);
      //CourseResponse courseResponse = CourseResponse.fromJson(map);

      final parsedJson = jsonDecode(response.body);
      final List categoryJson = parsedJson as List;
      //CourseResponse courseResponse = CourseResponse.fromJson(categoryJson as Map<String, dynamic>);
      emit(JobListDataLoaded(categoryJson));

      print("Course Response Data......: " + categoryJson.toString());

      print("Course response code......: " +response.statusCode.toString());

      if (response.statusCode == 200) {
        print("Course Response Data success......: " + categoryJson.toString());


          _courses = categoryJson;
          print('Set list...: '+_courses.toString());
        SharedPreferences prefs = await SharedPreferences.getInstance();
        await prefs.setString(
            'course_list', categoryJson.toString());


        emit(
          state.copyWith(
            jobPostStatus: JobPostStatus.success,
            message: "job course successful",

            //message: resData['message'],
            //message: courseResponse.name.toString(),
          ),
        );
      } else {
        print("Course failed......: " );
        emit(
          state.copyWith(
            jobPostStatus: JobPostStatus.error,
            //message: resData['errors'],
            message: 'Job post failed',

          ),
        );
      }
    } catch (e) {
      emit(
        state.copyWith(
          jobPostStatus: JobPostStatus.error,
          message: e.toString(),
        ),
      );
    }

  }
//---------------------------------




    void _onJobPostApi(JobPostApi event, Emitter<JobPostState> emit) async {
    emit(
      state.copyWith(
        jobPostStatus: JobPostStatus.loading,
      ),
    );


      var query = {"categories_id": state.categoriesId.toString()};

    Map<String, dynamic> data = {
      'categories_id': state.categoriesId

    };
    print("JOB_POST Before Post....: " + (data.toString()));
    //=========================
    try {
      final response =
      await http.post(Uri.parse('https://api.besttutor.xyz/api/guardian/job'),
          body: data);

      Map<String, dynamic> map = jsonDecode(response.body);
      Autogenerated person = Autogenerated.fromJson(map);

      print("Job Post Response Data......: " + person.toString());
      //print("Auth Response Data......: " + person.errors!.email.toString());

      if (response.statusCode == 201) {
        print("Job Post Success Response Data......: " + person.message.toString());
        emit(
          state.copyWith(
            jobPostStatus: JobPostStatus.success,
             message: "job post successful",
            //message: resData['message'],
            //message: person.message.toString(),
          ),
        );
      } else {
        print("Auth Error Response Data......: " + person.errors.toString());
        emit(
          state.copyWith(
            jobPostStatus: JobPostStatus.error,
            //message: resData['errors'],
            message: 'Job post failed',

          ),
        );
      }
    } catch (e) {
      emit(
        state.copyWith(
          jobPostStatus: JobPostStatus.error,
          message: e.toString(),
        ),
      );
    }

    //=========================
  }



}
